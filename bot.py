import nest_asyncio
nest_asyncio.apply()

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters
)

import asyncio

user_state = {}

# –ú–µ–Ω—é –∫–Ω–æ–ø–æ–∫
def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("üîü –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å 10 —Å—Å—ã–ª–æ–∫", callback_data="gen_10")],
        [InlineKeyboardButton("3Ô∏è‚É£0Ô∏è‚É£ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å 30 —Å—Å—ã–ª–æ–∫", callback_data="gen_30")],
        [InlineKeyboardButton("5Ô∏è‚É£0Ô∏è‚É£ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å 50 —Å—Å—ã–ª–æ–∫", callback_data="gen_50")],
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"
def get_restart_menu():
    keyboard = [[InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="restart")]]
    return InlineKeyboardMarkup(keyboard)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫:", reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "restart":
        user_state.pop(user_id, None)
        await query.message.reply_text("–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫:", reply_markup=get_main_menu())
        return

    count = int(query.data.split("_")[1])
    user_state[user_id] = {"count": count}
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ NFT-–ø–æ–¥–∞—Ä–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://t.me/nft/EvilEye-40207)")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏
async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in user_state:
        await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ —á–µ—Ä–µ–∑ /start")
        return

    base_link = update.message.text.strip()

    try:
        prefix, number_str = base_link.rsplit("-", 1)
        number = int(number_str)
    except:
        await update.message.reply_text("‚ùå –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ `-—á–∏—Å–ª–æ`.")
        return

    count = user_state[user_id]["count"]
    links = [f"<a href='{prefix}-{number + i}'>üéÅ –ü–æ–¥–∞—Ä–æ–∫ {i + 1}</a>" for i in range(count)]

    await update.message.reply_text(
        "\n".join(links),
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=get_restart_menu()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"
    )

    user_state.pop(user_id)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = ApplicationBuilder().token("7808173982:AAFEBJd3FDT8V-zErqg_EAufaq6FPRad5J0").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

asyncio.run(main())